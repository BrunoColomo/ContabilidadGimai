<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="errorProvider1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>